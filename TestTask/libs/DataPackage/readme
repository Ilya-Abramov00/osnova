
Имеем некий набор данных различной длины, для простоты - строк. Давайте реализуем его чтением из файла, для простоты:
*****
*************************************************************************************************************
****************
********************************************************************
Рандомную генерацию файла тоже добавьте в программу.
Количество строк не менее 100, длина строк от 1 до 10*N, где N максимальная длина пакета передачи по некому интерфейсу передачи данных. Например, 100 байт.
ЗАДАЧА: разбить исходный набор строк на пакеты, максимальной длины N.  Количество пакетов должно быть минимальным, если в пакет поместится 10 строк, упаковать в него все 10 строк. Если строка не помещается в пакет, необходимо предусмотреть разбиение строки на подстроки. Пустые концы пакетов должны быть минимально возможными для обеспечения задачи приема.
На приемном конце необходимо получить из них исходный набор строк. При этом необходимо предусмотреть, что пакеты на приеме могут перепутаться местами. При отправке пакеты идут 1, 2, 3,…,100, а при приеме могут идти 1, 2, 8, 29, 3, 43, …100, 98. Т.е. предусмотреть случайное перепутывание пакетов.
Что хочется видеть:
    1. Сначала генерацию исходного набора строк, и сохранение ее в файл.
    2. Потом разбиение набора строк на пакеты и сохранение набора пакетов в файл
    3. Перемешивание пакетов, сохранение перемешанного набора в файл
    4. Прием перемешанных пакетов, восстановление 	исходного набора строк.
Максимальную длину пакета N, задайте константой в main(). Распределение длины строк – случайное равномерное, от 1 до 10 * N, используйте <random>. 
В каждом пакете необходим заголовок, включающий в себя последовательный номер пакета, количество элементов в пакете. Каждый элемент тоже должен иметь подзаголовок, включающий номер элемента в исходном наборе строк.
Текст программы должен быть на языке C++, программа должна содержать cmake файл, для ее компиляции. Ограничение использоваться только стандартные библиотеки libc, libstd++, без boost, qt, etc.
Оцениваться будет не только работа программы и выполнение требований, но и качество кода, использование современных подходов в программировании, отсутствие лишних операций (копирования и т.д.).
